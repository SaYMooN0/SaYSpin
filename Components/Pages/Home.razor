@page "/"

@inject AppController allGameController
@inject GameLoggingService logger

@code {
    public GameFlowController gameFlowController;
    private NewStageItemsChoosingDialog newStageDialog;
    private StageCompletedDialog stageCompletedDialog;
    protected override void OnInitialized()
    {
        gameFlowController = allGameController.Game;
        gameFlowController.OnNewStageStarted += (newStageNumber) => newStageDialog.Open();
    }
}
<div class="home-page-container">
    <div class="home-central">
        <SlotMachineComponent SlotMachine="@gameFlowController.SlotMachine" />
        @if (gameFlowController.CoinsEnoughToCompleteTheStage())
        {
            <div class="container-for-complete-stage">
                <StageProgressBar CurrentCoins="@gameFlowController.CoinsCount" CoinsNeeded="@gameFlowController.CoinsNeededToCompleteTheStage" CurrentStage="@gameFlowController.CurrentStage" />
                <button @onclick="CompleteStageButtonPressed" class="complete-stage-button ">
                    Complete Stage
                </button>
            </div>
        }
        else
        {
            <StageProgressBar CurrentCoins="@gameFlowController.CoinsCount" CoinsNeeded="@gameFlowController.CoinsNeededToCompleteTheStage" CurrentStage="@gameFlowController.CurrentStage" />
        }
        <div class="bottom-content">
            @if (gameFlowController.SpinsLeft > 0)
            {

                <SpinButton spinsLeft="@gameFlowController.SpinsLeft" onSpin="SpinSlotMachine" />
            }
            else
            {
                <label>No spins left</label>
            }
        </div>

    </div>
    <InventoryComponent inventory="gameFlowController.Inventory" />
</div>
<NewStageItemsChoosingDialog @ref="newStageDialog" game="gameFlowController" refreshInventory="@StateHasChanged" />
<StageCompletedDialog @ref="stageCompletedDialog" ClaimRewardsAndStartNewStage="@FinishStageAndStartNew" />

@code {

    private void SpinSlotMachine()
    {
        gameFlowController.SpinSlotMachine();
        if (gameFlowController.SpinsLeft <= 0)
        {
            if (gameFlowController.CoinsEnoughToCompleteTheStage())
            {

            }
            else
            {

            }

        }
    }
    private async void CompleteStageButtonPressed()
    {
        var stageRes = gameFlowController.CompleteStage();
        await stageCompletedDialog.Open(stageRes);
    }
    private void FinishStageAndStartNew(StageCompletionResult rewards)
    {
        gameFlowController.Inventory.AddDiamonds(rewards.TotalDiamondsToAdd);

        foreach (var item in rewards.ItemRewards)
        {
            switch (item)
            {
                case Relic relic:
                    gameFlowController.AddRelicToInventory(relic);
                    break;
                case TileItem tileItem:
                    gameFlowController.AddTileItemToInventory(tileItem);
                    break;
            }
        }

        gameFlowController.StartNewStage();
        StateHasChanged();
    }

}
