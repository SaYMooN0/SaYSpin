@page "/"

@inject AppController allGameController
@inject GameLoggingService logger
@inject BeforeStageActionDialogService beforeStageActionDialog

@code {
    public GameFlowController gameFlowController;
    private StageCompletedDialog stageCompletedDialog;
    private InventoryComponent inventoryComponent;
    protected override void OnInitialized()
    {
        gameFlowController = allGameController.Game;
        gameFlowController.OnInventoryChanged += InventoryChanged;
    }

    private void InventoryChanged() =>
        inventoryComponent?.Refresh();

    public void Dispose() =>
        gameFlowController.OnInventoryChanged -= InventoryChanged;
}
<div class="home-page-container">
    <div class="home-central">
        <SlotMachineComponent SlotMachine="@gameFlowController.SlotMachine" />
        @if (gameFlowController.CoinsEnoughToCompleteTheStage())
        {
            <div class="container-for-complete-stage">
                <StageProgressBar CurrentCoins="@gameFlowController.CoinsCount" CoinsNeeded="@gameFlowController.CoinsNeededToCompleteTheStage" CurrentStage="@gameFlowController.CurrentStage" />
                <button @onclick="CompleteStageButtonPressed" class="complete-stage-button ">
                    Complete Stage
                </button>
            </div>
        }
        else
        {
            <StageProgressBar CurrentCoins="@gameFlowController.CoinsCount" CoinsNeeded="@gameFlowController.CoinsNeededToCompleteTheStage" CurrentStage="@gameFlowController.CurrentStage" />
        }
        <div class="bottom-content">
            @if (gameFlowController.SpinsLeft > 0)
            {
                <SpinButton spinsLeft="@gameFlowController.SpinsLeft" onSpin="SpinSlotMachine" />
            }
            else
            {
                <label class="out-of-spins-label unselectable">
                    <span class="no-spins-left">No spins left</span>
                    @if (gameFlowController.CoinsEnoughToCompleteTheStage())
                    {
                        <span class="finish-run-label">Finish run</span>
                    }

                </label>

            }
        </div>

    </div>
    <InventoryComponent inventory="gameFlowController.Inventory" @ref="inventoryComponent" />
</div>
<StageCompletedDialog @ref="stageCompletedDialog" ClaimRewardsAndStartNewStage="@FinishStageAndStartNew" />

@code {

    private void SpinSlotMachine()
    {
        gameFlowController.SpinSlotMachine();
        if (gameFlowController.SpinsLeft <= 0)
        {
            if (gameFlowController.CoinsEnoughToCompleteTheStage())
            {

            }
            else
            {

            }

        }
    }
    private async void CompleteStageButtonPressed()
    {
        var stageRes = gameFlowController.CompleteStage();
        await stageCompletedDialog.Open(stageRes);
    }
    private void FinishStageAndStartNew(StageCompletionResult rewards)
    {
        gameFlowController.Inventory.AddDiamonds(rewards.TotalDiamondsToAdd);

        foreach (var item in rewards.ItemRewards)
        {
            switch (item)
            {
                case Relic relic:
                    gameFlowController.AddRelicToInventory(relic);
                    break;
                case TileItem tileItem:
                    gameFlowController.AddTileItemToInventory(tileItem);
                    break;
            }
        }

        gameFlowController.StartNewStage();
        StateHasChanged();
    }

}
