@inject IJSRuntime JSRuntime
@inject BeforeStageActionDialogService DialogService
@inject AppController appController
<dialog id="beforeStageAction" class="unselectable">
    <div class="dialog-content">
        @switch (currentActionToShow)
        {
            case null:
                break;
            case BeforeStageActionType.OneOfActionsChoosing:
                <OneOfActionsChoosingDialogContent actions="actionsToShow[1..]"
                                                   onActionSelected="(action)=>{
                                                        actionsToShow.Clear();
                                                        actionsToShow.Add(action);
                                                        actionsToShow.Add(action);
                                                        MoveToNextBeforeStageAction();
                                                      }" />
                break;
            case BeforeStageActionType.TileItemChoosing:
                <ItemChoosingDialogContent generateItemsToChooseFrom="appController.Game.GenerateTileItemsForNewStageChoosing"
                                           moveToNextBeforeStageAction="MoveToNextBeforeStageAction" />
                break;
            case BeforeStageActionType.RelicChoosing:
                <ItemChoosingDialogContent generateItemsToChooseFrom="appController.Game.GenerateRelicsForNewStageChoosing"
                                           moveToNextBeforeStageAction="MoveToNextBeforeStageAction" />
                break;
            case BeforeStageActionType.AddRow:
            case BeforeStageActionType.AddColumn:
                <SlotMachineExtendedDialogContent actionType="currentActionToShow"
                                                  currentRowCount="appController.Game.SlotMachine.RowsCount"
                                                  currentColumnCount="appController.Game.SlotMachine.ColumnsCount"
                                                  moveToNextBeforeStageAction="MoveToNextBeforeStageAction" />
                break;
            case BeforeStageActionType.TokenChoosing:
                <TokenChoosingDialogContent onTokenSelected="(token)=>{appController.Game.Inventory.Tokens.AddToken(token); MoveToNextBeforeStageAction();}" />
                break;
            case BeforeStageActionType.CloneItem:
                <ItemCloningDialogContent moveToNextBeforeStageAction="MoveToNextBeforeStageAction" />
                break;
            case BeforeStageActionType.StatChoosing:
                <h1>Not implemented</h1>
                break;
            default:
                <h1>Not implemented type: @currentActionToShow</h1>
                break;

        }
    </div>
</dialog>
@code {
    BaseInventoryItem[] ItemsToChooseFromInChoosingActions { get; set; } = [];
    private List<BeforeStageActionType> actionsToShow { get; set; }
    private BeforeStageActionType? currentActionToShow => actionsToShow is not null && actionsToShow.Count > 0 ? actionsToShow[0] : null;
    public async Task Open(BeforeStageActionsGroup actionsGroup)
    {
        switch (actionsGroup.ActionType)
        {
            case BeforeStageActionGroupType.None:
                actionsToShow = [];
                return;
            case BeforeStageActionGroupType.All:
                actionsToShow = actionsGroup.Actions.ToList();
                break;
            case BeforeStageActionGroupType.OneOf:
                actionsToShow = [BeforeStageActionType.OneOfActionsChoosing];
                actionsToShow.AddRange(actionsGroup.Actions);
                break;
            default:
                throw new ArgumentException("Not supported before stage action group type");
        }
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.openDialog", "beforeStageAction");
        StateHasChanged();

    }

    private async Task Close() =>
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.closeDialog", "beforeStageAction");




    private void MoveToNextBeforeStageAction()
    {
        if (actionsToShow.Count > 1)
            actionsToShow.RemoveAt(0);
        else
            Close();
        StateHasChanged();
    }
    protected override void OnInitialized() =>
        DialogService.OnShow = Open;

    public void Dispose() => DialogService.Clear();
}
