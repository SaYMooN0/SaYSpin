@inject IJSRuntime JSRuntime
@inject ShowItemInfoDialogService DialogService

<dialog id="itemInfoDisplayDialog" class="unselectable">
    <div class="dialog-content">
        @if (item is not null)
        {
            <label class="rarity-label" style="color:@item.Rarity.ToHexColor()">
                ◆<span> @item.Rarity.ToString()</span>◆
            </label>
            <img class="item-img" src="@ResourcePathsHelper.ResourcesImages(item.Image)" style="filter: drop-shadow(0 0 12px @item.Rarity.ToHexColor());" />




            <label class="item-name">@item.Name</label>
            <label class="description">@item.Description</label>

        }
        else
        {
            <label>Error (item is null)</label>
        }
        <button @onclick="Close" class="dialog-close-button">✖</button>
    </div>
</dialog>

@code {
    private BaseInventoryItem item { get; set; }
    public async Task Open(BaseInventoryItem itemToDisplay)
    {
        this.item = itemToDisplay;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.openDialog", "itemInfoDisplayDialog");
    }

    private async Task Close() =>
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.closeDialog", "itemInfoDisplayDialog");

    protected override void OnInitialized()
    {
        DialogService.OnShow += Open;
    }

    public void Dispose()
    {
        DialogService.OnShow -= Open;
    }
}
