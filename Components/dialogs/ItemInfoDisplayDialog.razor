@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@inject ShowItemInfoDialogService ShowItemInfoDialog

<dialog id="itemInfoDisplayDialog" class="unselectable">
    <div class="dialog-content">
        @if (item is not null)
        {

            <img class="item-img" src="@ResourcePathsHelper.ResourcesImages(item.Image)" style="filter: drop-shadow(0 0 12px @item.Rarity.ToHexColor());" />
            <label class="item-name">@item.Name</label>
            <div class='basic-info-container @(item is TileItem? "ti-basic-info" : "rel-basic-info")'>
                @if (item is TileItem ti)
                {
                    <label>
                        <span>Base Income: </span>
                        <span>
                            @ti.InitialCoinValue
                            <img class="coin-img-inline" src="/resources/images/coin.png" />
                        </span>
                    </label>
                    <label>
                        <span>Tags: </span>
                        <span>@(ti.Tags.Length > 0 ? $"[ {string.Join(", ", ti.Tags)} ]" : "No tags")</span>
                    </label>
                }
                <label>
                    <span>Rarity: </span>
                    <span style="color:@item.Rarity.ToHexColor()"> @item.Rarity.ToString()</span>
                </label>
                <label>
                    <span class="property-name">
                        Is Unique:
                        <BasicTooltip onHoverText="Inventory item called unique if it can only be obtained once" />
                    </span>
                    <span>@(item.IsUnique ? "yes" : "no")</span>
                </label>
                <label>
                    <span class="property-name">
                        Is Special:
                        <BasicTooltip onHoverText="Inventory item called special if it cannot be obtained through shop or in before stage rewards" />
                    </span>
                    <span>@(item.IsSpecial ? "yes" : "no")</span>
                </label>

            </div>
            <ul class="description">
                @if (!string.IsNullOrEmpty(item.Description))
                {
                    var lines = item.Description.Split('\n');

                    @foreach (var line in lines)
                    {
                        <li>@ReplaceCoinsWithImages(line)</li>
                    }

                }
            </ul>
        }
        else
        {
            <label>Error (item is null)</label>
        }
        <DialogCloseButton closeAction="()=>Close()" />
    </div>
</dialog>

@code {

    private BaseInventoryItem item { get; set; }
    public async Task Open(BaseInventoryItem itemToDisplay)
    {
        this.item = itemToDisplay;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.openDialog", "itemInfoDisplayDialog");
    }

    private async Task Close() =>
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.closeDialog", "itemInfoDisplayDialog");

    protected override void OnInitialized()
    {
        ShowItemInfoDialog.OnShow += Open;
    }

    public void Dispose()
    {
        ShowItemInfoDialog.OnShow -= Open;
    }
    private MarkupString ReplaceCoinsWithImages(string text)
    {
        if (string.IsNullOrEmpty(text))
            return new MarkupString("");
        string processedText = Regex.Replace(text, @"\b(coins?|Coins?)\b", @"<img class=""coin-img-inline"" src=""/resources/images/coin.png"" alt=""coin"" />");
        return new MarkupString(processedText);
    }
}
