@inject IJSRuntime JSRuntime
<dialog id="newStagePickingDialog">
    <div>
        @if (_pickingStageTileItem)
        {
            <label class="choose-label">Choose new item</label>
            <div class="options-container">
                @foreach (TileItem tileItem in TileItemsToPick)
                {
                    <NewStageItemChoosingCard item="tileItem" OnChosen="ItemChosen" />
                }
            </div>
            <ItemsChoosingDialogBottomButtons onRefresh="RefreshTileItemsWithToken" onSkip="TileItemSkipped" tokensCount="game.Inventory.Tokens.Count(TokenType.NewStageItemsRefresh)" />
        }
        else
        {

            <label class="choose-label">Choose new item</label>
            <div class="options-container">
                @foreach (Relic relic in RelicsToPick)
                {
                    <NewStageItemChoosingCard item="relic" OnChosen="ItemChosen" />
                }
            </div>
            <ItemsChoosingDialogBottomButtons onRefresh="RefreshRelicsWithToken" onSkip="RelicSkipped" tokensCount="game.Inventory.Tokens.Count(TokenType.NewStageItemsRefresh)" />
        }
    </div>
</dialog>

@code {
    [Parameter]
    public Action refreshInventory { get; set; }

    [Parameter]
    public GameFlowController game { get; set; }

    private bool _pickingStageTileItem = true;

    private int StageNumber = 0;
    private TileItem[] TileItemsToPick { get; set; } = [];
    private Relic[] RelicsToPick { get; set; } = [];

    public async Task Open()
    {
        _pickingStageTileItem = true;
        RefreshTileItems();
        RefreshRelics();
        StageNumber = game.CurrentStage;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.openDialog", "newStagePickingDialog");
    }

    private async Task Close()
    {
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.closeDialog", "newStagePickingDialog");
    }

    private void TileItemSkipped()
    {
        game.TriggerOnNewStageChoosingSkippedEffects();
        refreshInventory();
        StateHasChanged();
        _pickingStageTileItem = false;

    }
    private void RelicSkipped()
    {
        game.TriggerOnNewStageChoosingSkippedEffects();
        refreshInventory();
        StateHasChanged();
        Close();
    }
    private void ItemChosen(BaseInventoryItem chosenItem)
    {
        if (chosenItem is TileItem)
        {
            game.AddTileItemToInventory(chosenItem as TileItem);
            _pickingStageTileItem = false;
            refreshInventory();

        }
        else if (chosenItem is Relic)
        {
            game.AddRelicToInventory(chosenItem as Relic);
            refreshInventory();
            Close();
        }
        else
            throw new Exception("Invalid type of chose item");


    }
    private void RefreshTileItemsWithToken()
    {
        if (game.UseToken(TokenType.NewStageItemsRefresh))
            RefreshTileItems();
    }
    private void RefreshRelicsWithToken()
    {
        if (game.UseToken(TokenType.NewStageItemsRefresh))
            RefreshRelics();
    }

    private void RefreshTileItems() =>
            TileItemsToPick = game.GenerateTileItemsForNewStageChoosing();

    private void RefreshRelics() =>
            RelicsToPick = game.GenerateRelicsForNewStageChoosing();

}
