@inject IJSRuntime JSRuntime
<dialog id="newStagePickingDialog">
    <label class="preparing-label">Prepare for stage @stageNumber</label>
    @if (_pickingStageTileItem)
    {
        <label class="choose-label">Choose new item</label>
        @foreach (BaseTileItem itemToPick in ItemsToPick)
        {
            <div>
                <InventoryItemWithRarityComponent itemToDisplay="itemToPick"/>
                <button>Choose</button>
            </div>
        }
        <button>Refresh items</button>
    }
    else
    {
        <label class="choose-label">Choose new item</label>
        @foreach (BaseRelic relicToPick in RelicsToPick)
        {
            <div>
                <InventoryItemWithRarityComponent itemToDisplay="relicToPick" />
                <button>Choose</button>
            </div>
        }
        <button>Refresh relic</button>
    }
    <button @onclick="Close">Close</button> @* will be deleted *@
</dialog>

@code {
    private int stageNumber = 0;
    private bool _pickingStageTileItem = true;

    private BaseTileItem[] ItemsToPick { get; set; } = [];
    private BaseRelic[] RelicsToPick { get; set; } = [];

    public async Task Open(int newStageNumber, BaseTileItem[] itemsToChooseFrom, BaseRelic[] reicsToChooseFrom)
    {
        ItemsToPick = itemsToChooseFrom;
        RelicsToPick = reicsToChooseFrom;
        stageNumber = newStageNumber;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.openDialog", "newStagePickingDialog");
    }

    private async Task Close() =>
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.closeDialog", "newStagePickingDialog");
}
