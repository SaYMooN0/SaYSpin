@inject IJSRuntime JSRuntime
<dialog id="newStagePickingDialog">
    <label class="preparing-label">Prepare for stage @stageNumber</label>
    @if (_pickingStageTileItem)
    {
        <label class="choose-label">Choose new item</label>
        @foreach (BaseTileItem itemToPick in ItemsToPick)
        {
            @* on pick add to inventory and change state of _pickingStageTileItem*@
        }
        <button>Refresh items</button>
    }
    else
    {
        <label class="choose-label">Choose new item</label>
        @foreach (BaseRelic relicToPick in RelicsToPick)
        {
            @* on pick add to inventory and close*@
        }
        <button>Refresh relic</button>
    }
    <button @onclick="Close">Close</button> @* will be deleted *@
</dialog>

@code {


    protected override void OnInitialized()
    {
        ItemsToPick = new();
        RelicsToPick = new();
    }
    private int stageNumber = 0;
    private bool _pickingStageTileItem = true;
    private List<BaseTileItem> ItemsToPick { get; set; }
    private List<BaseRelic> RelicsToPick { get; set; }

    public async Task Open(int newStageNumber)
    {
        stageNumber = newStageNumber;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.openDialog", "newStagePickingDialog");
    }

    private async Task Close() =>
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.closeDialog", "newStagePickingDialog");
}
