@inject IJSRuntime JSRuntime
<dialog id="newStagePickingDialog">
    <label class="preparing-label">Prepare for stage @StageNumber</label>
    @if (_pickingStageTileItem)
    {
        <label class="choose-label">Choose new item</label>
        <div class="options-container">
            @foreach (BaseTileItem tileItem in TileItemsToPick)
            {
                <NewStageItemChoosingCard item="tileItem" OnChosen="ItemChosen" />
            }
        </div>
        <button class="skip-button" @onclick="()=>{_pickingStageTileItem=false;}">
            Skip
        </button>
        <button @onclick="RefreshTileItems" class="refresh-button">
            Refresh
        </button>
    }
    else
    {
        <label class="choose-label">Choose new item</label>
        <div class="options-container">
            @foreach (Relic relic in RelicsToPick)
            {
                <NewStageItemChoosingCard item="relic" OnChosen="ItemChosen" />
            }
        </div>
        <button class="skip-button" @onclick="Close">
            Skip
        </button>
        <button @onclick="RefreshTileItems" class="refresh-button">
            Refresh
        </button>
    }
</dialog>

@code {
    [Parameter]
    public Action refreshInventory { get; set; }

    [Parameter]
    public GameFlowController game { get; set; }

    private bool _pickingStageTileItem = true;

    private int StageNumber = 0;
    private BaseTileItem[] TileItemsToPick { get; set; } = [];
    private Relic[] RelicsToPick { get; set; } = [];

    public async Task Open()
    {
        _pickingStageTileItem = true;
        RefreshTileItems();
        RefreshRelics();
        StageNumber = game.CurrentStage;
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.openDialog", "newStagePickingDialog");
    }

    private async Task Close()
    {
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.closeDialog", "newStagePickingDialog");
    }


    private void ItemChosen(BaseInventoryItem chosenItem)
    {
        if (chosenItem is BaseTileItem)
        {
            game.Inventory.AddTileItem(chosenItem as BaseTileItem);
            _pickingStageTileItem = false;
            refreshInventory();

        }
        else if (chosenItem is Relic)
        {
            game.Inventory.AddRelic(chosenItem as Relic);
            refreshInventory();
            Close();
        }
        else
        {
            throw new Exception("Invalid type of chose item");
        }

    }
    private void RefreshTileItems()
    {
        TileItemsToPick = game.GenerateTileItemsForNewStageChoosing();
    }
    private void RefreshRelics()
    {
        RelicsToPick = game.GenerateRelicsForNewStageChoosing();
    }
}
