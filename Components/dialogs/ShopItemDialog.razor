@inject ShowItemInfoDialogService showItemInfoDialog
@inject IJSRuntime JSRuntime
@inject AppController gameController
<dialog id="shopItemDialog">
    <DialogCloseButton closeAction="()=>Close()" />
    @if (itemToBuy is not null)
    {
        <div class="dialog-content unselectable">
            <label class="item-name" style="color:@itemToBuy.Item.Rarity.ToHexColor()">@itemToBuy.Item.Name</label>
            <div class="img-container">
                <InventoryItemWithRarityComponent itemToDisplay="itemToBuy.Item" />
                <label class="press-label">Press for more info</label>
            </div>
            @if (IsAbleToBuy.ableToBuy)
            {
                <div class='buy-button'>
                    Buy for @itemToBuy.Price
                    <img src="/resources/images/inventory/diamond.png" />
                </div>
            }
            else
            {
                <label class="buy-error">
                    @IsAbleToBuy.errorMessage
                </label>
            }

        </div>
    }
</dialog>
@code {
    private (bool ableToBuy, string? errorMessage) IsAbleToBuy => gameController.Game.Inventory.IsAbleToBuy(itemToBuy);
    public ItemForSale itemToBuy;
    private void BuyAction()
    {


    }
    public async Task Open(ItemForSale item)
    {
        this.itemToBuy = item;
        await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.openDialog", "shopItemDialog");
        this.StateHasChanged();
    }

    private async Task Close() =>
    await JSRuntime.InvokeVoidAsync("blazorDialogFunctions.closeDialog", "shopItemDialog");
}
