@inject AppController appController
<div class="dialog-content">
    <label class="choose-label unselectable">Choose one item</label>
    <div class="options-container">
        @foreach (BaseInventoryItem item in ItemsToChooseFrom)
        {
            <div class="item-choosing-card unselectable">
                <span>
                    <InventoryItemWithRarityComponent itemToDisplay="item" />
                </span>

                <button @onclick="()=>ItemChosenAction(item)">
                    Choose
                </button>
            </div>
        }
    </div>
    <ItemsChoosingDialogBottomButtons onRefresh="Refresh"
                                      onSkip="SkipPressed"
                                      tokensCount="appController.Game.Inventory.Tokens.Count(TokenType.NewStageItemsRefresh)" />
</div>

@code {
    private void SkipPressed()
    {
        appController.Game.TriggerOnNewStageChoosingSkippedEffects();
        moveToNextBeforeStageAction();

    }
    private void Refresh()
    {
        if (appController.Game.UseToken(TokenType.NewStageItemsRefresh))
            ItemsToChooseFrom = generateItemsToChooseFrom();
    }
    private void ItemChosenAction(BaseInventoryItem item)
    {
        appController.Game.AddBaseInventoryItemToInventory(item);
        moveToNextBeforeStageAction();
    }

    private BaseInventoryItem[] ItemsToChooseFrom { get; set; }
    protected override void OnParametersSet()
    {
        ItemsToChooseFrom = generateItemsToChooseFrom();

    }
    [Parameter]
    public Func<BaseInventoryItem[]> generateItemsToChooseFrom { get; set; }
    [Parameter]
    public Action moveToNextBeforeStageAction { get; set; }
}
