@inject AppController appController
<div class="dialog-content">
    <LabelWithDiamonds text="Choose one item to clone" />
    <div class="options-container">
        @foreach (var item in ItemsToChooseFrom())
        {
            <div class="item-card">
                <InventoryItemWithRarityComponent itemToDisplay="item" />
                <div class="clone-button" @onclick="()=>cloneItem(item)">
                    Clone
                </div>
            </div>
        }
    </div>
</div>
@code {
    private BaseInventoryItem[] ItemsToChooseFrom()
    {
        var items = new List<BaseInventoryItem>();
        var takenNames = new HashSet<string>();

        var tileItems = appController.Game.Inventory.TileItems
            .OrderBy(x => Guid.NewGuid())
            .Where(item => takenNames.Add(item.Name))
            .Take(Randomizer.Int(7, 12));

        items.AddRange(tileItems);

        var relics = appController.Game.Inventory.Relics
            .OrderBy(x => Guid.NewGuid())
            .Where(item => takenNames.Add(item.Name)) 
            .Take(Randomizer.Int(5, 10));

        items.AddRange(relics);

        return items.ToArray();
    }

    private void cloneItem(BaseInventoryItem item)
    {
        appController.Game.AddBaseInventoryItemToInventory(item);
        moveToNextBeforeStageAction();
    }
    [Parameter]
    public Action moveToNextBeforeStageAction { get; set; }
}
