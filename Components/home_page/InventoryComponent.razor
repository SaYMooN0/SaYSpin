<div class="inventory">
    <div class="inventory-border"></div>
    <div class="inventory-content">

        <div class="inventory-top-div">
            @foreach (var tok in inventory.Tokens.TokensAsTuples())
            {
                <TokenDisplayComponent type="@tok.tokenType" count="@tok.count" />
            }
            <DiamondsCountDisplayComponent count="@inventory.DiamondsCount" />
        </div>
        <InventoryItemsContainerComponent label="Relics" grouped="groupedRelics" nonGrouped="nonGroupedRelics" />
        <InventoryItemsContainerComponent label="TileItems" grouped="groupedTileItems" nonGrouped="nonGroupedTileItems" />
        <div class='remove-item-button @(RemovalTokensCount == 0 ? "remove-item-disabled" : "")'
             @onclick="()=> {if (RemovalTokensCount > 0) itemRemovingDialog.Open();}">
            Remove item
            <img src="@TokenType.InventoryItemRemoval.GetFullImagePath()" />
        </div>
    </div>
</div>
<ItemRemovingDialog @ref="itemRemovingDialog" />
@code {
    [Parameter]
    public Inventory inventory { get; set; }

    private IEnumerable<InventoryItemWithCount> groupedRelics;
    private IEnumerable<BaseInventoryItem> nonGroupedRelics;
    private IEnumerable<InventoryItemWithCount> groupedTileItems;
    private IEnumerable<BaseInventoryItem> nonGroupedTileItems;

    private ItemRemovingDialog itemRemovingDialog;
    protected override void OnInitialized()
    {

    }

    protected override void OnParametersSet()
    {
        groupedRelics = inventory.Relics.Where(r => !(r is IWithCounter))
                                .GroupBy(r => r.Name)
                                .Select(g => new InventoryItemWithCount(g.First(), g.Count()));

        nonGroupedRelics = inventory.Relics.Where(r => r is IWithCounter);

        groupedTileItems = inventory.TileItems.Where(ti => !(ti is IWithCounter))
                                    .GroupBy(ti => ti.Name)
                                    .Select(g => new InventoryItemWithCount(g.First(), g.Count()));

        nonGroupedTileItems = inventory.TileItems.Where(ti => ti is IWithCounter);

    }
    private int RemovalTokensCount =>
        inventory.Tokens.Count(TokenType.InventoryItemRemoval);
    public void Refresh() =>
        StateHasChanged();
    public record class InventoryItemWithCount(
        BaseInventoryItem Item,
        int Count);
}
