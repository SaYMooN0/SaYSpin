<div class="inventory">
    <div class="inventory-border"></div>
    <div class="inventory-content">

        <div class="inventory-top-div">
            @foreach (var tok in inventory.Tokens.TokensAsTuples())
            {
                <TokenDisplayComponent type="@tok.tokenType" count="@tok.count" />
            }
            <DiamondsCountDisplayComponent count="@inventory.DiamondsCount" />
        </div>
        @* with sorting *@

        <LabelWithDiamonds text="Relics" />
        <div class="inventory-items-container">
            @foreach (var displayItem in groupedRelics)
            {
                <div class="inventory-item-wrapper">
                    <InventoryItemWithRarityComponent itemToDisplay="displayItem.Item" />
                    @if (displayItem.Count > 1)
                    {
                        <span class="item-count">@displayItem.Count</span>
                    }
                </div>
            }
            @foreach (var displayItem in nonGroupedRelics)
            {
                <div class="inventory-item-wrapper">
                    <InventoryItemWithRarityComponent itemToDisplay="displayItem.Item" />
                </div>
            }
        </div>

        <LabelWithDiamonds text="TileItems" />
        <div class="inventory-items-container">
            @foreach (var displayItem in groupedTileItems)
            {
                <div class="inventory-item-wrapper">
                    <InventoryItemWithRarityComponent itemToDisplay="displayItem.Item" />
                    @if (displayItem.Count > 1)
                    {
                        <span class="item-count">@displayItem.Count</span>
                    }
                </div>
            }
            @foreach (var displayItem in nonGroupedTileItems)
            {
                <div class="inventory-item-wrapper">
                    <InventoryItemWithRarityComponent itemToDisplay="displayItem.Item" />
                </div>
            }
        </div>


        <button class="delete-item-button" @onclick="DeleteItem">
            <label>
                Delete item
            </label>
            <img src="@TokenType.InventoryItemRemoval.GetFullImagePath()" />
        </button>
    </div>

</div>

@code {
    [Parameter]
    public Inventory inventory { get; set; }
    private IEnumerable<InventoryItemDisplay> groupedRelics;
    private IEnumerable<InventoryItemDisplay> nonGroupedRelics;
    private IEnumerable<InventoryItemDisplay> groupedTileItems;
    private IEnumerable<InventoryItemDisplay> nonGroupedTileItems;

    protected override void OnInitialized()
    {

    }

    protected override void OnParametersSet()
    {
        groupedRelics = inventory.Relics.Where(r => !(r is IWithCounter))
                                .GroupBy(r => r.Name)
                                .Select(g => new InventoryItemDisplay(g.First(), g.Count()));

        nonGroupedRelics = inventory.Relics.Where(r => r is IWithCounter)
                                 .Select(r => new InventoryItemDisplay(r, 1));

        groupedTileItems = inventory.TileItems.Where(ti => !(ti is IWithCounter))
                                    .GroupBy(ti => ti.Name)
                                    .Select(g => new InventoryItemDisplay(g.First(), g.Count()));

        nonGroupedTileItems = inventory.TileItems.Where(ti => ti is IWithCounter)
                                       .Select(ti => new InventoryItemDisplay(ti, 1));

    }

    private void DeleteItem()
    {

    }
    public void Refresh() =>
        StateHasChanged();
    private record class InventoryItemDisplay(
        BaseInventoryItem Item,
        int Count);
}
