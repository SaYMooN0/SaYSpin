<div class="inventory">
    <div class="inventory-border"></div>
    <div class="inventory-content">

        <div class="inventory-top-div">
            @foreach (var i in inventory.Tokens.TokensAsTuples())
            {
                <TokenDisplayComponent type="@i.tokenType" count="@i.count" />
            }
            <DiamondsCountDisplayComponent count="@inventory.DiamondsCount" />
        </div>
        @* with sorting *@

        <label class="inventory-label unselectable">
            <span>◆</span>
            Relics
            <span>◆</span>
        </label>
        <div class="inventory-items-container">
            @foreach (var i in relics)
            {
                <div>
                    <InventoryItemWithRarityComponent itemToDisplay="i" />
                </div>
            }
        </div>
        <label class="inventory-label unselectable">
            <span>◆</span>
            Tile Items
            <span>◆</span>
        </label>
        <div class="inventory-items-container">
            @foreach (var i in tileItems)
            {
                <div>
                    <InventoryItemWithRarityComponent itemToDisplay="i" />
                </div>
            }
        </div>

        <button class="delete-item-button" @onclick="DeleteItem">
            <label>
                Delete item
            </label>
            <img src="@TokenType.InventoryItemRemoval.ImageFullPath()"/>
            </button>
    </div>

</div>

@code {
    [Parameter]
    public Inventory inventory { get; set; }

    private List<TileItem> tileItems;
    private IEnumerable<Relic> relics;

    protected override void OnParametersSet()
    {
        tileItems = inventory.TileItems??new();
        relics = inventory.Relics;
    }
    private void DeleteItem()
    {

    }
}
